{"version":3,"sources":["components/HenkiloLista.js","components/Suodatin.js","components/TallennaUusi.js","services/persons.js","App.js","serviceWorker.js","index.js"],"names":["HenkiloLista","_ref","persons","onClick","map","person","react_default","a","createElement","key","name","number","id","Suodatin","value","onChange","TallennaUusi","onSubmit","nameValue","nameOnChange","numberValue","numberOnChange","type","url","services_persons","axios","get","then","response","data","newObject","post","put","concat","delete","App","_useState","useState","_useState2","Object","slicedToArray","setPersons","_useState3","_useState4","newName","setNewName","_useState5","_useState6","newNumber","setNewNumber","_useState7","_useState8","filterBy","setFilterBy","_useState9","_useState10","viesti","setViesti","useEffect","personService","personsToShow","filter","toUpperCase","includes","tieto","style","backgroundColor","color","fontStyle","fontSize","borderRadius","padding","marginBottom","components_Suodatin","event","target","components_TallennaUusi","preventDefault","already","find","element","undefined","setTimeout","window","confirm","elem","components_HenkiloLista","console","log","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.82535dcb.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nconst HenkiloLista = ({persons, onClick}) => {\r\n  return persons.map(person =><p key={person.name}>{person.name} {person.number}<button id={person.id} onClick={onClick}>poista</button></p>)\r\n}\r\n\r\n export default HenkiloLista;","import React from 'react'\r\n\r\nconst Suodatin = ({value, onChange}) => {\r\n  return (\r\n  <div>Rajaa näytettäviä: <input value={value} onChange={onChange} /></div>\r\n  )\r\n}\r\n\r\n export default Suodatin;","import React from 'react'\r\n\r\nconst TallennaUusi = ({onSubmit, nameValue, nameOnChange, numberValue, numberOnChange }) => {\r\n  return (\r\n    <form onSubmit={onSubmit}>\r\n        <div>\r\n          nimi: <input value={nameValue}\r\n          onChange={nameOnChange}/>\r\n        </div>\r\n        <div>\r\n          numero: <input value={numberValue} \r\n          onChange={numberOnChange}/>\r\n        </div>\r\n        <div>\r\n          <button type=\"submit\">lisää</button>\r\n        </div>\r\n      </form>)\r\n}\r\n\r\nexport default TallennaUusi;","import axios from 'axios'\r\nconst url = '/api/persons'\r\n\r\nconst findAll = () => {\r\n    const request = axios.get(url)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst createnew = newObject => {\r\n  const request = axios.post(url, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${url}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst erase = (id) => {\r\n  return axios.delete(`${url}/${id}`)\r\n}\r\n\r\nexport default { \r\n  findAll, createnew, update, erase \r\n}","import React, { useState, useEffect } from 'react'\nimport HenkiloLista from './components/HenkiloLista'\nimport Suodatin from './components/Suodatin'\nimport TallennaUusi from './components/TallennaUusi'\nimport personService from './services/persons'\n\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ filterBy, setFilterBy ] = useState('')\n  const [ viesti, setViesti ] = useState('')\n  \n  useEffect(() => {\n  personService\n    .findAll()\n      .then(response => {\n        setPersons(response)\n      })\n}, [])\n  \n  const personsToShow = filterBy === \"\"\n    ? persons\n    : persons.filter(person => person.name.toUpperCase().includes(filterBy.toUpperCase()))\n  \n    const Ilmoitus = ({ tieto }) => {\n      const ilmoitusStyle = {\n        backgroundColor: 'green',\n        color: 'white',\n        fontStyle: 'bold',\n        fontSize: 15,\n        borderRadius: 5,\n        padding: 15,\n        marginBottom: 10\n      }\n\n      if (tieto === '') {\n        return null\n      }\n    \n      return (\n        <div style={ilmoitusStyle}>\n          {tieto}\n        </div>\n      )\n    }\n\n  const handleNewName = (event) => {  \n    setNewName(event.target.value)\n  }\n  \n    const handleNewNumber = (event) => {\n    setNewNumber(event.target.value)\n  }\n  \n  const handleFilter = (event) => {\n    \n    setFilterBy(event.target.value)\n  }\n\n  const deletePerson = (event) => {\n    var id = event.target.id\n    if (window.confirm(`Haluatko varmasti poistaa henkilön?`)){\n    personService\n    .erase(id)\n    .then(response => {\n      console.log(id);\n      setPersons(persons.filter(person => person.id !== id ))\n      setViesti(\"Henkilö on poistettu tietokannasta\");\n      setTimeout(function(){setViesti('')}, 2000);\n    })\n  }\n  }\n  \n  const savePerson = (event)=> {\n    event.preventDefault();\n    const person = {name: newName, number: newNumber}\n    var already = persons.find(function(element) {\n      //console.log(element, person);\n      return element.name === person.name;\n    });\n    if (already === undefined){\n      personService\n      .createnew(person)\n      .then(response => {\n        setPersons(persons.concat(response))\n        setViesti(`Lisättiin ${person.name}`)\n        setTimeout(function(){setViesti('')}, 2000);\n        setNewName(\"\");\n        setNewNumber(\"\");\n      })\n\n    } else {\n      if(window.confirm(`${newName} löytyy jo luettelosta, haluatko vaihtaa hänen numeronsa?`)){\n        personService\n        .update(already.id, person)\n        .then(setPersons(persons.map(elem => elem.id === already.id ? person : elem)),\n        setViesti(`Päivitettiin ${person.name}`),\n        setTimeout(function(){setViesti('')}, 2000),\n        setNewName(\"\"),\n        setNewNumber(\"\"))\n      }\n    }\n  }\n\n\n  return (\n    <div>\n      <h2>Puhelinluettelo</h2>\n      <Ilmoitus tieto={viesti} />\n      <Suodatin value = {filterBy} onChange={handleFilter}/>\n      \n      <h3>Tallenna uusi kontakti</h3>\n      <TallennaUusi onSubmit={savePerson} nameValue={newName} nameOnChange={handleNewName} numberValue={newNumber} numberOnChange={handleNewNumber} />\n      \n      <h2>Numerot</h2>\n      <HenkiloLista persons={personsToShow} onClick={deletePerson}/>\n    </div>\n  )\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}